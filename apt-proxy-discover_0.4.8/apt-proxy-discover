#!/bin/bash

#############################################################################
# Apt Proxy Discover                                                        #
# CreateDate: 17/01/2014
# LastUpdate: 19/10/2015                                                          #
# Version: 0.4.7                                                            #
# Author: Jos√© Miguel Silva Caldeira                                        #
# Mail: miguel@ncdc.pt                                                      #
# Web: http://www.ncdc.pt                                                   #
# Many thanks to all who tested this script with me, you know who you are.  #
#############################################################################

export LANG=C

# Let's ignore meta entries
if [ "$ADDRFAM" = "meta" ]; then
    exit
fi

# If this interface is the loopback, exiting
if [[ "$IFACE" == "lo" ]]; then
	exit
fi

time_start=$(date +%s%3N)

is_valid_mask() {
	if [[ -z "$1" ]]; then
		return 1
	fi
	if [[ $1 =~ ^[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}$ ]]; then
		local mask=$(grep -E -q '^(254|252|248|240|224|192|128)\.0\.0\.0|255\.(254|252|248|240|224|192|128|0)\.0\.0|255\.255\.(254|252|248|240|224|192|128|0)\.0|255\.255\.255\.(254|252|248|240|224|192|128|0)' <<< "$1" && echo 0 || echo 1)
		if [[ $mask -eq 0 ]]; then
			return 0
		fi
	fi
	return 1
}

mask2cidr() {
	bits=0
	local IFS=.
	for octet in $1 ; do
		case $octet in
			255) let bits+=8;;
			254) let bits+=7;;
			252) let bits+=6;;
			248) let bits+=5;;
			240) let bits+=4;;
			224) let bits+=3;;
			192) let bits+=2;;
			128) let bits+=1;;
			0);;
		esac
	done
	echo "$bits"
	return 0
}

ip2long() {
	local IFS=.
	read -a a1 <<< "$1"
	echo "$((${a1[0]}*16777216 + ${a1[1]}*65536 + ${a1[2]}*256 + ${a1[3]}))"
	return 0
}

long2ip() {
	echo "$(($1 / 16777216)).$(($(($1 % 16777216)) / 65536)).$(($(($1 % 65536)) / 256)).$(($1 % 256))"
	return 0
}

little_endian_hexadecimal2ip(){
	a1=()
	i=0
	while read -r -n2 a1[i]; do
		((++i))
	done <<< "$1"
	echo "$((0x${a1[3]})).$((0x${a1[2]})).$((0x${a1[1]})).$((0x${a1[0]}))"
	return 0
}

networkaddress(){
	local IFS=.
	read -a a1 <<< "$1"
	read -a a2 <<< "$2"
	echo "$((${a1[0]} & ${a2[1]})).$((${a1[1]} & ${a2[1]})).$((${a1[2]} & ${a2[2]})).$((${a1[3]} & ${a2[3]}))"
}

get_interface_mask(){
        if [[ -z "$1" ]]; then
                return 1
        fi
	while read -a a1; do
		if [[ "${a1[0]}" == "$1" ]] && \
		[[ "${a1[2]}" == "00000000" ]] &&\
		[[ "${a1[1]}" != "0000FEA9" ]]; then
			echo $(little_endian_hexadecimal2ip "${a1[7]}")
			return 0
		fi
	done < /proc/net/route
	return 1
}

get_vpn_interface_mask(){
        if [[ -z "$1" ]]; then
                return 1
        fi
	while read -a a1; do
		if [[ "${a1[0]}" == "$1" ]] && \
		[[ "${a1[3]}" == "0003" ]] && \
		[[ "${a1[7]}" != "00000000" ]]; then
			echo $(little_endian_hexadecimal2ip "${a1[7]}")
			return 0
		fi
	done < /proc/net/route
	return 1
}


get_interface_network(){
	while read -a a1; do
		if [[ "${a1[0]}" == "$1" ]] && \
		[[ "${a1[2]}" == "00000000" ]] && \
		[[ "${a1[1]}" != "0000FEA9" ]]; then
			echo $(little_endian_hexadecimal2ip "${a1[1]}")
			return 0
		fi
	done < /proc/net/route
	return 1
}

is_vpn(){
	if [[ "$VPN_IP_IFACE" == "$IFACE"  ]]; then
		return 0;
	fi
	return 1;
}

get_vpn_interface_network(){
	while read -a a1; do
		if [[ "${a1[0]}" == "$1" ]] && \
		[[ "${a1[3]}" == "0003" ]] && \
		[[ "${a1[7]}" != "00000000" ]]; then
			echo $(little_endian_hexadecimal2ip "${a1[1]}")
			return 0
		fi
	done < /proc/net/route
	return 1
}

read_http_response(){
	local request=$(timeout -s KILL 0.5 wget --connect-timeout=1 --timeout=1 --spider -S http://$1:3142 2>&1 | grep 'HTTP/')
	read -a a1 <<< "$request"
	if [[ "${a1[1]}" == "200" ]] || [[ "${a1[1]}" == "404" ]]; then
		return 0;
	fi
	return 1;
}

old_proxy_existe(){
	old_proxy_ip=$(grep -o '[0-9]\{1,3\}\.[0-9]\{1,3\}\.[0-9]\{1,3\}\.[0-9]\{1,3\}' /etc/apt/apt.conf.d/01proxy)
	if [[ -z $old_proxy_ip ]]; then
		 return 1;
	fi
	read_http_response "$old_proxy_ip"
	if [[ $? == 0 ]]; then
		return 0
	fi
	return 1
}

proxy_existe(){

	is_up_iface "$IFACE"
	if [[ $? == 1  ]]; then
		exit 0
	fi

	read_http_response "$1"
	if [[ $? == 0 ]]; then
		configure_proxy "$1"
		return 0
	fi
	return 1
}

check_initial_ips(){
	for (( x=0; x < $initial_ips_num; x++ )); do
		proxy_existe $(long2ip $(($firstip + $x)))
		if [[ $? == 0 ]]; then
			return 0;
		fi
	done
	return 1;
}

check_between_ips(){
	for (( x=$(($initial_ips_num)); x < $(($valid_ips_num-$initial_ips_num)); x++ )); do
		proxy_existe $(long2ip $(($firstip + $x)))
		if [[ $? == 0 ]]; then
			return 0;
		fi
	done
	return 1;
}

check_last_ips(){
	for (( x=$(($valid_ips_num-1)); x > $(($valid_ips_num - 1 - $initial_ips_num)); x-- )); do
		proxy_existe $(long2ip $(($firstip + $x)))
		if [[ $? == 0 ]]; then
			return 0;
		fi
	done
	return 1;
}

get_default_gatway_ip(){
	while read -a a1; do
		if [[ "${a1[1]}" == "00000000" ]] && \
		[[ "${a1[7]}" == "00000000" ]]; then
			echo $(little_endian_hexadecimal2ip "${a1[2]}")
			return 0
		fi
	done < /proc/net/route
	return 1
}

get_default_gateway_interface(){
	while read -a a1; do
		if [[ "${a1[1]}" == "00000000" ]] &&\
		[[ "${a1[7]}" == "00000000" ]]; then
			echo "${a1[0]}"
			return 0
		fi
	done < /proc/net/route
	return 1
}

msg(){
	messages=${LANGUAGE}_messages[$1]
	if [[ -z ${!messages} ]]; then
		LANGUAGE=pt_PT
		messages=${LANGUAGE}_messages[$1]
	fi
	messages=${!messages}
	echo ${messages}
}

notify_user(){
	local i=0
	while read -r line; do
		line=$(tr -s " " <<< $line)
		read -a a1 <<< "$line"
		if [[ ("${a1[1]}" == "?" && "${a1[2]:0:1}" == ":" && "${a1[6]}" == "?") || \
			("${a1[1]}" == "+" && "${a1[2]:0:3}" == "tty" && "${a1[6]}" == "old") ]]; then
			user_procs=$(pgrep -u ${a1[0]})
			for proc in $user_procs; do
				unset DISPLAY
				unset XAUTHORITY
				unset DBUS_SESSION_BUS_DDDRESS

				LANGUAGE=$(grep -az ^LANGUAGE= "/proc/$proc/environ"  | cut -d '=' -f 2)
				if [[ -z $LANGUAGE ]]; then
					LANGUAGE=$(grep -az ^LANG= "/proc/$proc/environ"  | cut -d '=' -f 2)
				fi

				DISPLAY=$(grep -az ^DISPLAY= "/proc/$proc/environ"  | cut -d '=' -f 2)
				XAUTHORITY=$(grep -az ^XAUTHORITY= "/proc/$proc/environ"  | cut -d '=' -f 2)
				DBUS_SESSION_BUS_ADDRESS=$(grep -az ^DBUS_SESSION_BUS_ADDRESS= "/proc/$proc/environ"  | cut -d '=' -f 2)
				LC_TIME=$(grep -az ^LC_TIME= "/proc/$proc/environ"  | cut -d '=' -f 2)

				if [[ $LANGUAGE && $DISPLAY  && $XAUTHORITY && $DBUS_SESSION_BUS_ADDRESS ]]; then
					#export $(echo LANGUAGE=pt_PT)
					export $(grep -az ^DISPLAY= "/proc/$proc/environ")
					export $(grep -az ^XAUTHORITY= "/proc/$proc/environ")
					export $(grep -az ^DBUS_SESSION_BUS_ADDRESS= "/proc/$proc/environ")
					#export $(grep -az ^LC_TIME= "/proc/$proc/environ")

					su "${a1[0]}" -c "notify-send \"$(msg 0)\" \"$(msg 1)\" -i info" &
					pids[${i}]=$!
					let "i++"
					break
				fi
			done
		fi
	done <<< "$(who -a)"

	for pid in ${pids[@]}; do
		wait $pid
	done

}

configure_proxy(){
	echo "# Do not edit this file manually, this file is" > /etc/apt/apt.conf.d/01proxy
	echo "# automatically configured by the apt-proxy-discover." >> /etc/apt/apt.conf.d/01proxy
	echo "#" >> /etc/apt/apt.conf.d/01proxy
	echo "# $(date)" >> /etc/apt/apt.conf.d/01proxy
	echo "# APT-Proxy was found in \"$(($(date +%s%3N) - $time_start))\" milliseconds." >> /etc/apt/apt.conf.d/01proxy
	echo "Acquire::http{ Proxy \"http://$1:3142\";};" >> /etc/apt/apt.conf.d/01proxy
	notify_user
}

proxy_not_found() {
	old_proxy_existe
	if [[ $? == 1 ]]; then
		echo "# Do not edit this file manually, this file" > /etc/apt/apt.conf.d/01proxy
		echo "# is automatically configured by the apt-proxy-discovery." >> /etc/apt/apt.conf.d/01proxy
		echo "#" >> /etc/apt/apt.conf.d/01proxy
		echo "# $(date)" >> /etc/apt/apt.conf.d/01proxy
		echo "# Could not find an apt-proxy on this network!" >> /etc/apt/apt.conf.d/01proxy
	fi
	exit
}

is_up_iface(){
        if [[ -z "$1" ]]; then
                return 1
        fi
	local stat=$(< /sys/class/net/$1/operstate)
	
	if [[ "$stat" == "down" ]]; then
		return 1
	fi
	return 0
}


# Messages
# If you use apt-proxy-discover, help translate
# these texts to work in their language.

# pt_PT
pt_PT_messages[0]="APT Proxy Discover"
pt_PT_messages[1]="Foi encontrado um APT Proxy na rede. O seu sistema foi configurado para usa-lo!"

# en_US example
en_US_messages[0]="APT Proxy Discover"
en_US_messages[1]="An APT proxy was found on this network. Your system has been configured to use it!"

# if interface goes up
if [[ $PHASE == "post-up" ]]; then

	# if a proxy existe we are fine
	# and exit
	old_proxy_existe
	if [[ $? == 0 ]]; then
		exit
	fi

	# I will try the router, to test if it has a
	# apt-proxy-cache running
	# Test first HOP / the router of network
	proxy_existe $(get_default_gatway_ip)
	if [[ $? == 0 ]]; then
		exit
	fi
	# The router have not the apt-proxy-cache running

	# I will try the next router, to test if it has a
	# apt-proxy-cache running
	# Test second HOP / the router of network

	# Try find the router IP with traceroute command
	if which traceroute >/dev/null; then
		tracer=$(traceroute -n -m 2  8.8.8.8 | grep -e "^ 2")
		read -a a1 <<< "$tracer"
		proxy_existe "${a1[1]}"
		if [[ $? == 0 ]]; then
			exit
		fi
	# Try find the router IP with tracepath command
	elif which tracepath >/dev/null; then
		tracer=$(tracepath -n -m 2  8.8.8.8  | grep -e "^ 2:")
		read -a a1 <<< "$tracer"
		proxy_existe "${a1[1]}"
		if [[ $? == 0 ]]; then
			exit
		fi
	fi
	# The router of the next HOP have not the apt-proxy running

	# I need scan all the network to see if some machine have the
	# apt-proxy-cache running on it.
	# It is slow but, let's do it.

	# Collect the necessary information.
	initial_ips_num=5;

	# It is now possible to find out the apt-proxy via VPN.
	# if it a VPN
	is_vpn 
	if [[ $? == 0 ]]; then
 		network=$(get_vpn_interface_network  "$IFACE")
		netmask=$(get_vpn_interface_mask "$IFACE")
        #if not
	else
 		network=$(get_interface_network  "$IFACE")
		netmask=$(get_interface_mask "$IFACE")
	fi

	firstip=$(($(ip2long $network) + 1))
	valid_ips_num=$(($((1 << $((32 - $(mask2cidr $netmask))))) - 1))

	if [[ $(($initial_ips_num * 3)) -lt $valid_ips_num ]]; then
		between_ips_stat=true
		last_ips_stat=true
	else
		initial_ips_num=$valid_ips_num
	fi

	# Check the first ips.
	check_initial_ips
	if [[ $? == 0 ]]; then
		exit
	fi

	# Check out the latest ips.
	if [[ $last_ips_stat ]]; then
		check_last_ips
		if [[ $? == 0 ]]; then
			exit
		fi
	fi

	# Check intermediate ips.
	if [[ $between_ips_stat ]]; then
		check_between_ips
		if [[ $? == 0 ]]; then
			exit
		fi
	fi

	# Sorry I can't find the apt-proxy-cache in this network
	proxy_not_found

# if interface goes down
else
	old_proxy_existe
	if [[ $? == 1 ]]; then
		echo "# Do not edit this file manually, this file is automatically" > /etc/apt/apt.conf.d/01proxy
		echo "# configured by the apt-proxy-discover." >> /etc/apt/apt.conf.d/01proxy
		echo "#" >> /etc/apt/apt.conf.d/01proxy
		echo "# "$(date)" " >> /etc/apt/apt.conf.d/01proxy
		echo "# APT proxy configuration has been removed." >> /etc/apt/apt.conf.d/01proxy
	fi
fi

exit
